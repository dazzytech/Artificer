using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace Data.UI
{
    /// <summary>
    /// stores information about the node prefab
    /// and generates the code snippet from the node data
    /// </summary>
    public class NodeData: IndexedObject
    {
        #region NESTED

        public class IO
        {
            public enum IOType { LINK, PARAM };

            public enum VarType { NUM, BOOL, OBJECT, ARRAY, UNDEF };

            /// <summary>
            /// Base class for mutliple types, either a link between the two
            /// nodes or 
            /// </summary>
            public IOType Type;

            public VarType Var;

            // IO identifier 
            public string ID;
            // ID of other nodes that this connects to
            public string LinkID;

            /// <summary>
            /// ID of the node that this IO object belongs to
            /// </summary>
            public string NodeID;

            /// <summary>
            /// Display the label on a graphic
            /// </summary>
            public string Label;
        }

        #endregion

        /// <summary>
        /// Conditional, sequence, etc..
        /// </summary>
        public string Category;

        /// <summary>
        /// The display name of the graphic and the identifier
        /// </summary>
        public string Label;

        /// <summary>
        /// If an object 
        /// </summary>
        public List<string> SupportedTypes = new List<string>();

        /// <summary>
        /// links and params that travel into the node
        /// </summary>
        public List<IO> Input = new List<IO>();

        /// <summary>
        /// links and params that travel out of the object
        /// </summary>
        public List<IO> Output = new List<IO>();

        /// <summary>
        /// The template of the script generated
        /// </summary>
        public List<string> Script = new List<string>();

        public string Description = "";

        /// <summary>
        /// The script object that is generated by the params and 
        /// settings, generated and returned when called
        /// </summary>
        public string CodeSnippet
        {
            get
            {
                return "";
            }
        }
    }
}